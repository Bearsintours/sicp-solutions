// Greatest common divisor
function gcd(a, b) {
  return b === 0 ? a : gcd(b, a % b);
}

/*
 ** Interpreter using substitution model (normal order)
 */

gcd(206, 40);
// 40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40);
// 206 % 40 === 0 ? 40 : gcd(206 % 40, 40 % (206 % 40))
// -> remainder operation (1)
// 6 === 0 ? 40 : gcd(206 % 40, 40 % (206 % 40))
gcd(206 % 40, 40 % (206 % 40));
// 40 % (206 % 40) === 0
//    ? 206 % 40
//    : gcd(40 % (206 % 40),
//          (206 % 40) % (40 % (206 % 40)))
// remainder operations (2) and (3)
// 4 === 0
//    ? 206 % 40
//    : gcd(40 % (206 % 40),
//          (206 % 40) % (40 % (206 % 40)))
gcd(40 % (206 % 40), (206 % 40) % (40 % (206 % 40)));
// (206 % 40) % (40 % (206 % 40)) === 0
//    ? 40 % (206 % 40)
//    : gcd((206 % 40) % (40 % (206 % 40)),
//         (40 % (206 % 40)) % ((206 % 40) % (40 %
//                                             (206 % 40)))
// remainder operations (4), (5), (6), (7)
// 2 === 0
//    ? 40 % (206 % 40)
//    : gcd((206 % 40) % (40 % (206 % 40)),
//          (40 % (206 % 40)) % ((206 % 40) % (40 %
//                                             (206 % 40))))
gcd(
  (206 % 40) % (40 % (206 % 40)),
  (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)))
);
// (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))) === 0
//    ? (206 % 40) % (40 % (206 % 40))
//    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)),
//          ((206 % 40) % (40 % (206 % 40))) %
//          ((40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))))
// remainder operations (8), (9), (10), (11), (12), (13), (14)
// 0 === 0
//    ? (206 % 40) % (40 % (206 % 40))
//    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))),
//          ((206 % 40) % (40 % (206 % 40))) %
//          ((40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))))
// (206 % 40) % (40 % (206 % 40))
// remainder operations (15), (16), (17), (18)
// => gcd(206, 40) returns 2

/*
 ** Interpreter using applicative order (used by JS)
 */

gcd(206, 40);
// 40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40);
// remainder operation (1)
gcd(40, 6);
// 6 === 0 ? 40 : gcd(6, 40 % 6)
gcd(6, 40 % 6);
// remainder operation (2)
gcd(6, 4);
// 4 === 0 ? 6 : gcd(4, 6 % 4)
gcd(4, 6 % 4);
// remainder operation (3)
gcd(4, 2);
// 2 === 0 : 4 : gcd(2, 4 % 2)
gcd(2, 4 % 2);
// remainder operation (4)
gcd(2, 0);
// 0 === 0 ? 2 : gcd(0, 2 % 0)
// returs 2
